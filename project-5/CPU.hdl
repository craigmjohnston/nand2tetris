// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /* mxxaccccccdddjjj
    m: 0 if C instruction, 1 if A instruction
    x: ignored
    a: comp - ALU fed from A or inM
    c: comp - ALU function
    d: dest - which registers take ALU output
    j: jump - which instruction to fetch next
 */

 // if A instruction, load inM into A register

// d[0] = store in RAM[A]
// d[1] = store in D
// d[2] = store in A

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=ainstruct);

    // A register
    Mux16(a=outalu, b=instruction, sel=ainstruct, out=ina); // if A instruct, use inM, otherwise use ALU output
    Or(a=ainstruct, b=instruction[5], out=loada); // either A instruct or d[2] flag
    ARegister(in=ina, load=loada, out=outa, out[0..14]=addressM); // A register
    
    // D register
    And(a=instruction[15], b=instruction[4], out=loadd); // load D if NOT A-instruct AND d[1] flag
    DRegister(in=outalu, load=loadd, out=outd);

    // ALU
    Mux16(a=outa, b=inM, sel=instruction[12], out=inalu);
    ALU(
        x=outd, 
        y=inalu, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9],
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outalu,
        out=outM,
        zr=outzero,
        ng=outneg
    );

    // store in RAM[A]
    And(a=instruction[15], b=instruction[3], out=writeM); // c-instruct AND d[0]

    // jumping

    // 0 0 0 = no jump
    // 0 0 1 = comp >  0 -> jump
    // 0 1 0 = comp == 0 -> jump
    // 0 1 1 = comp >= 0 -> jump
    // 1 0 0 = comp <  0 -> jump
    // 1 0 1 = comp != 0 -> jump
    // 1 1 0 = comp <= 0 -> jump
    // 1 1 1 = jump

    // j[0] (> 0) I think this is an XNOR gate, but we haven't got one of them
    // could be XOR -> NOT to save a gate
    Not(in=outzero, out=notzero);
    Not(in=outneg, out=notneg);
    And(a=notzero, b=notneg, out=outpos);    
    // j[1] (= 0) : outzero
    // j[2] (< 0) : outneg

    And(a=instruction[0], b=outpos, out=jgt);
    And(a=instruction[1], b=outzero, out=jeq);
    And(a=instruction[2], b=outneg, out=jlt);

    Or(a=jgt, b=jeq, out=jgte);
    Or(a=jgte, b=jlt, out=jmp);

    // PC
    Not(in=jmp, out=notjmp);
    Or(a=notjmp, b=ainstruct, out=incpc);
    Not(in=incpc, out=loadpc);
    PC(in=outa, load=loadpc, inc=incpc, reset=reset, out[0..14]=pc);
}